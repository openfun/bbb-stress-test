#!/usr/bin/env python
"""CLI to simulate an active user on a BBB session"""

import argparse
import logging
import os
import time

from bigbluebutton_api_python import BigBlueButton
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))


def init_browser(args):
    """Launch the browser."""
    options = Options()
    options.add_argument("--disable-infobars")
    options.add_argument("--no-sandbox")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_argument("--shm-size=1gb")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--use-fake-device-for-media-stream")
    options.add_argument("--use-fake-ui-for-media-stream")
    if args.audioInput:
        options.add_argument(f"--use-file-for-fake-audio-capture={args.audioInput}")
    options.add_argument("--mute-audio")

    logging.info("Starting browser")

    return webdriver.Chrome(executable_path="chromedriver", options=options)


def join_bbb_meeting(args, browser, join_url):
    """Control the browser to join the meeting."""

    selenium_timeout = 60

    logging.info("Joining BBB meeting")
    browser.get(join_url)

    audio_action_label = "Microphone" if args.audioInput else "Listen only"
    logging.info("Waiting for Audio prompt")
    element = EC.presence_of_element_located(
        (By.CSS_SELECTOR, f'[aria-label="{audio_action_label}"]')
    )
    WebDriverWait(browser, selenium_timeout).until(element)
    logging.info("Clicking on %s", audio_action_label)
    browser.find_elements_by_css_selector(f'[aria-label="{audio_action_label}"]')[
        0
    ].click()

    element = EC.invisibility_of_element((By.CSS_SELECTOR, ".ReactModal__Overlay"))
    WebDriverWait(browser, selenium_timeout).until(element)

    if args.enableWebcam:
        logging.info("Clicking on Share webcam")
        browser.find_elements_by_css_selector('[aria-label="Share webcam"]')[0].click()
        logging.info("Waiting for webcam confirmation prompt")
        element = EC.presence_of_element_located(
            (By.CSS_SELECTOR, '[aria-label="Start sharing"]')
        )
        WebDriverWait(browser, selenium_timeout).until(element)
        logging.info("Clicking on Start sharing")
        browser.find_elements_by_css_selector('[aria-label="Start sharing"]')[0].click()


def get_join_url(bbb, args):
    """Get the URL to joint the meeting."""
    meeting_info = bbb.get_meeting_info(args.id)
    password = meeting_info.get_meetinginfo().get_attendeepw()
    return bbb.get_join_meeting_url(args.user, args.id, password)


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--server", help="BBB URL")
    parser.add_argument("-p", "--secret", help="BBB Secret")
    parser.add_argument("-i", "--id", help="BBB Meeting ID")
    parser.add_argument("-d", "--duration", help="Test duration in seconds")
    parser.add_argument("-u", "--user", help="BBB Username", default="Test")
    parser.add_argument(
        "-a",
        "--audioInput",
        help="Enable the microphone with the provided fake audio input (.wav)",
    )
    parser.add_argument(
        "-w",
        "--enableWebcam",
        help="Enable the webcam with fake input generated by the browser",
        action="store_true",
    )
    return parser.parse_args()


def main():
    """Script entrypoint."""
    args = parse_args()
    bbb = BigBlueButton(args.server, args.secret)

    browser = None
    try:
        browser = init_browser(args)
        join_url = get_join_url(bbb, args)
        join_bbb_meeting(args, browser, join_url)
        logging.info("BBB meeting initialized, sleeping %ss", {args.duration})
        time.sleep(int(args.duration))
        logging.info("Leaving meeting.")

    finally:
        if browser:
            browser.quit()
